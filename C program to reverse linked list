struct Node
{
int data;
struct Node* next;
};
struct Node reverse (struct Node h, int k)
{
struct Node current = h;
struct Node next = NULL;
struct Node prev = NULL;
int count = 0;
while (current != NULL && count < k)
{
next = current->next;
current->next = prev;
prev = current;
current = next;
count++;
}
if (next != NULL)
h->next = reverse(next, k);
 return prev;
}
void push(struct Node** h_ref, int new_data)
{
struct Node* new_node =
(struct Node*) malloc(sizeof(struct Node));
new_node->data = new_data;
new_node->next = (*h_ref);
(*h_ref) = new_node;
}
void printList(struct Node *node)
{
while (node != NULL)
{
printf("%d ", node->data);
node = node->next;
}
}
int main(void)
{
struct Node* h= NULL;
push(&h, 8);
push(&h, 7);
push(&h, 6);
push(&h, 5);
push(&h, 4);
push(&h, 3);
push(&h, 2);
push(&h, 1);
printf("\n list \n");
List(h);
head = reverse(h, 2);
printf("\nReversed list \n");
printList(h);
return(0);
}
